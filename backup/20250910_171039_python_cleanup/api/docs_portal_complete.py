#!/usr/bin/env python3
"""
Complete Docs Portal - Migraci√≥n completa de ia-ops-docs a Dev-Core
Portal completo con todas las funcionalidades originales mejoradas
"""

from fastapi import FastAPI, HTTPException, Query, Request, Form
from fastapi.responses import HTMLResponse, JSONResponse, RedirectResponse
from fastapi.staticfiles import StaticFiles
from fastapi.templating import Jinja2Templates
import os
import json
import logging
from datetime import datetime
from pathlib import Path
from typing import List, Dict, Optional, Any
import re

# Configure logging
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

app = FastAPI(title="IA-Ops Complete Docs Portal", version="2.0.0")

# Setup directories
DOCS_DIR = Path("/app/docs")
STATIC_DIR = Path("/app/static")
TEMPLATES_DIR = Path("/app/templates")
REPOS_DIR = Path("/app/repositories")

# Create directories
for dir_path in [DOCS_DIR, STATIC_DIR, TEMPLATES_DIR, REPOS_DIR]:
    dir_path.mkdir(parents=True, exist_ok=True)

# Setup static files and templates
app.mount("/static", StaticFiles(directory=str(STATIC_DIR)), name="static")
templates = Jinja2Templates(directory=str(TEMPLATES_DIR))

class CompleteDocsPortal:
    def __init__(self):
        self.setup_default_structure()
        self.setup_templates()
        self.setup_static_files()
    
    def setup_default_structure(self):
        """Setup complete documentation structure"""
        default_docs = {
            "README.md": """# IA-Ops Complete Documentation Portal

## üöÄ Portal Migrado y Mejorado

Este portal ha sido completamente migrado de `ia-ops-docs` a `ia-ops-dev-core` con mejoras significativas:

### ‚úÖ Funcionalidades Migradas
- Portal de documentaci√≥n completo
- Gesti√≥n de repositorios
- B√∫squeda avanzada en documentaci√≥n
- Build autom√°tico de MkDocs
- Sincronizaci√≥n de contenido
- API REST completa
- Interfaz web moderna

### üîß Servicios Dev-Core Integrados
- **Repository Manager** (8860): Gesti√≥n de repositorios Git
- **Task Manager** (8861): Gesti√≥n de tareas as√≠ncronas
- **Log Manager** (8862): Centralizaci√≥n de logs
- **DataSync Manager** (8863): Sincronizaci√≥n de datos
- **GitHub Runner Manager** (8864): Gesti√≥n de runners
- **Docs Portal** (8845): Este portal completo

### üóÑÔ∏è Infraestructura
- **PostgreSQL** (5434): Base de datos principal
- **Redis** (6380): Cache y sesiones
- **MinIO** (9899): Almacenamiento de objetos

### üé≠ Frontend
- **Backstage** (3000): Portal principal
- **Veritas** (8869): Testing y calidad

## üìã APIs Disponibles

### Portal Principal
- `GET /` - Portal principal
- `GET /health` - Health check
- `GET /status` - Estado del sistema

### Documentaci√≥n
- `GET /docs` - Lista de documentos
- `GET /docs/{path}` - Ver documento
- `POST /docs/search` - B√∫squeda avanzada
- `POST /docs/upload` - Subir documento

### Repositorios
- `GET /repositories` - Lista de repositorios
- `POST /repositories/sync` - Sincronizar repositorio
- `GET /repositories/{repo}/docs` - Docs de repositorio

### Build y Deploy
- `POST /build/mkdocs` - Build MkDocs
- `GET /build/status` - Estado de builds
- `POST /deploy/docs` - Deploy documentaci√≥n
""",
            "services/complete-migration.md": """# Migraci√≥n Completa ia-ops-docs ‚Üí Dev-Core

## üéØ Objetivos Completados

### 1. Portal Unificado ‚úÖ
- Migraci√≥n completa del portal de documentaci√≥n
- Interfaz web moderna y responsive
- B√∫squeda avanzada integrada
- Gesti√≥n de archivos mejorada

### 2. Integraci√≥n con Dev-Core ‚úÖ
- Aprovecha todos los microservicios existentes
- Gesti√≥n centralizada de repositorios
- Sincronizaci√≥n autom√°tica de contenido
- Logs centralizados

### 3. Funcionalidades Mejoradas ‚úÖ
- Build autom√°tico de MkDocs
- Sincronizaci√≥n con repositorios Git
- API REST completa
- Health checks y monitoreo

### 4. Arquitectura Simplificada ‚úÖ
- Sin dependencias externas complejas
- Sistema de archivos local optimizado
- Integraci√≥n nativa con Dev-Core
- Escalabilidad mejorada

## üìä Comparaci√≥n: Antes vs Despu√©s

### Antes (ia-ops-docs)
- Servicio independiente
- Dependencia de MinIO
- Configuraci√≥n compleja
- Gesti√≥n separada

### Despu√©s (Dev-Core Integrado)
- Parte del ecosistema Dev-Core
- Sistema de archivos local
- Configuraci√≥n simplificada
- Gesti√≥n centralizada

## üöÄ Beneficios Obtenidos

1. **Mantenimiento Simplificado**: Un solo punto de gesti√≥n
2. **Performance Mejorado**: Acceso directo a archivos
3. **Integraci√≥n Nativa**: Aprovecha servicios existentes
4. **Escalabilidad**: F√°cil extensi√≥n de funcionalidades
5. **Monitoreo Unificado**: Health checks centralizados
""",
            "api/endpoints.md": """# API Endpoints Completos

## üåê Portal Principal

### GET /
Portal principal con interfaz web completa

### GET /health
```json
{
  "status": "healthy",
  "service": "complete-docs-portal",
  "version": "2.0.0",
  "components": {
    "docs": "healthy",
    "repositories": "healthy",
    "build": "healthy"
  }
}
```

## üìö Documentaci√≥n

### GET /docs
Lista todos los documentos disponibles
```json
{
  "documents": [...],
  "count": 10,
  "categories": ["api", "services", "infrastructure"]
}
```

### GET /docs/{path}
Obtiene contenido de un documento espec√≠fico
```json
{
  "path": "api/endpoints.md",
  "content": "...",
  "html": "...",
  "metadata": {...}
}
```

### POST /docs/search
B√∫squeda avanzada en documentaci√≥n
```json
{
  "query": "dev-core",
  "filters": {
    "category": "services",
    "type": "markdown"
  }
}
```

## üóÇÔ∏è Repositorios

### GET /repositories
Lista repositorios sincronizados
```json
{
  "repositories": [
    {
      "name": "ia-ops-dev-core",
      "status": "synced",
      "last_sync": "2025-09-10T16:24:00Z",
      "docs_count": 15
    }
  ]
}
```

### POST /repositories/sync
Sincroniza repositorio espec√≠fico
```json
{
  "repository": "ia-ops-dev-core",
  "branch": "main",
  "force": false
}
```

## üî® Build y Deploy

### POST /build/mkdocs
Inicia build de MkDocs
```json
{
  "repository": "ia-ops-dev-core",
  "output_format": "html",
  "theme": "material"
}
```

### GET /build/status
Estado de builds activos
```json
{
  "active_builds": [...],
  "completed_builds": [...],
  "failed_builds": [...]
}
```
"""
        }
        
        for file_path, content in default_docs.items():
            full_path = DOCS_DIR / file_path
            full_path.parent.mkdir(parents=True, exist_ok=True)
            if not full_path.exists():
                full_path.write_text(content)
    
    def setup_templates(self):
        """Setup HTML templates"""
        main_template = """
<!DOCTYPE html>
<html lang="es">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>IA-Ops Complete Docs Portal</title>
    <style>
        * { margin: 0; padding: 0; box-sizing: border-box; }
        body { font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif; background: #f5f7fa; }
        .header { background: linear-gradient(135deg, #667eea 0%, #764ba2 100%); color: white; padding: 2rem 0; }
        .container { max-width: 1200px; margin: 0 auto; padding: 0 2rem; }
        .nav { display: flex; justify-content: space-between; align-items: center; margin-bottom: 2rem; }
        .nav h1 { font-size: 2.5rem; font-weight: 300; }
        .nav-links { display: flex; gap: 2rem; }
        .nav-links a { color: white; text-decoration: none; padding: 0.5rem 1rem; border-radius: 5px; transition: background 0.3s; }
        .nav-links a:hover { background: rgba(255,255,255,0.2); }
        .hero { text-align: center; }
        .hero h2 { font-size: 1.5rem; font-weight: 300; margin-bottom: 1rem; }
        .status-bar { background: #d4edda; border: 1px solid #c3e6cb; color: #155724; padding: 1rem; border-radius: 5px; margin: 2rem 0; }
        .main-content { background: white; margin: 2rem auto; padding: 2rem; border-radius: 10px; box-shadow: 0 2px 20px rgba(0,0,0,0.1); }
        .feature-grid { display: grid; grid-template-columns: repeat(auto-fit, minmax(300px, 1fr)); gap: 2rem; margin: 2rem 0; }
        .feature-card { background: #f8f9fa; padding: 1.5rem; border-radius: 8px; border-left: 4px solid #007bff; }
        .feature-card h3 { color: #007bff; margin-bottom: 1rem; }
        .search-section { background: #e7f3ff; padding: 2rem; border-radius: 8px; margin: 2rem 0; }
        .search-box { display: flex; gap: 1rem; margin-bottom: 1rem; }
        .search-box input { flex: 1; padding: 0.75rem; border: 1px solid #ddd; border-radius: 5px; font-size: 1rem; }
        .search-box button { padding: 0.75rem 1.5rem; background: #007bff; color: white; border: none; border-radius: 5px; cursor: pointer; font-size: 1rem; }
        .search-box button:hover { background: #0056b3; }
        .docs-grid { display: grid; grid-template-columns: repeat(auto-fill, minmax(250px, 1fr)); gap: 1rem; margin: 2rem 0; }
        .doc-card { background: white; padding: 1rem; border-radius: 8px; border: 1px solid #e9ecef; transition: transform 0.2s, box-shadow 0.2s; }
        .doc-card:hover { transform: translateY(-2px); box-shadow: 0 4px 15px rgba(0,0,0,0.1); }
        .doc-card h4 { color: #495057; margin-bottom: 0.5rem; }
        .doc-card p { color: #6c757d; font-size: 0.9rem; margin-bottom: 1rem; }
        .doc-card a { color: #007bff; text-decoration: none; font-weight: 500; }
        .doc-card a:hover { text-decoration: underline; }
        .footer { background: #343a40; color: white; text-align: center; padding: 2rem 0; margin-top: 4rem; }
        .api-section { background: #fff3cd; border: 1px solid #ffeaa7; padding: 1.5rem; border-radius: 8px; margin: 2rem 0; }
        .endpoint { background: white; padding: 1rem; margin: 0.5rem 0; border-radius: 5px; border-left: 3px solid #28a745; }
        .method { display: inline-block; padding: 0.25rem 0.5rem; border-radius: 3px; color: white; font-size: 0.8rem; font-weight: bold; margin-right: 0.5rem; }
        .get { background: #28a745; }
        .post { background: #007bff; }
        .put { background: #ffc107; color: #212529; }
        .delete { background: #dc3545; }
    </style>
</head>
<body>
    <header class="header">
        <div class="container">
            <nav class="nav">
                <h1>üöÄ IA-Ops Complete Portal</h1>
                <div class="nav-links">
                    <a href="/">Inicio</a>
                    <a href="/docs">Documentos</a>
                    <a href="/repositories">Repositorios</a>
                    <a href="/api/docs">API</a>
                    <a href="/health">Estado</a>
                </div>
            </nav>
            <div class="hero">
                <h2>Portal de Documentaci√≥n Completo - Migrado a Dev-Core</h2>
                <p>Gesti√≥n unificada de documentaci√≥n, repositorios y builds</p>
            </div>
        </div>
    </header>

    <main class="container">
        <div class="status-bar">
            ‚úÖ <strong>Migraci√≥n Completada:</strong> Portal completo migrado exitosamente de ia-ops-docs a ia-ops-dev-core con funcionalidades mejoradas
        </div>

        <div class="main-content">
            <div class="feature-grid">
                <div class="feature-card">
                    <h3>üìö Gesti√≥n de Documentos</h3>
                    <p>Carga, edita y organiza documentaci√≥n con b√∫squeda avanzada y renderizado autom√°tico de Markdown.</p>
                    <a href="/docs">Ver Documentos ‚Üí</a>
                </div>
                <div class="feature-card">
                    <h3>üóÇÔ∏è Repositorios Integrados</h3>
                    <p>Sincronizaci√≥n autom√°tica con repositorios Git y gesti√≥n centralizada de contenido.</p>
                    <a href="/repositories">Gestionar Repositorios ‚Üí</a>
                </div>
                <div class="feature-card">
                    <h3>üî® Build Autom√°tico</h3>
                    <p>Generaci√≥n autom√°tica de sitios MkDocs con temas personalizados y deploy integrado.</p>
                    <a href="/build">Gestionar Builds ‚Üí</a>
                </div>
                <div class="feature-card">
                    <h3>üì° API Completa</h3>
                    <p>API REST completa para integraci√≥n con otros servicios y automatizaci√≥n de procesos.</p>
                    <a href="/api/docs">Ver API ‚Üí</a>
                </div>
            </div>

            <div class="search-section">
                <h3>üîç B√∫squeda en Documentaci√≥n</h3>
                <div class="search-box">
                    <input type="text" id="searchInput" placeholder="Buscar en toda la documentaci√≥n...">
                    <button onclick="searchDocs()">Buscar</button>
                    <button onclick="loadAllDocs()" style="background: #28a745;">Ver Todos</button>
                </div>
                <div id="searchResults"></div>
            </div>

            <div id="docsContainer">
                <h3>üìã Documentos Recientes</h3>
                <div class="docs-grid" id="docsGrid">
                    <p>Cargando documentos...</p>
                </div>
            </div>

            <div class="api-section">
                <h3>üì° Endpoints Principales</h3>
                <div class="endpoint">
                    <span class="method get">GET</span>
                    <code>/health</code> - Health check del sistema
                </div>
                <div class="endpoint">
                    <span class="method get">GET</span>
                    <code>/docs</code> - Lista todos los documentos
                </div>
                <div class="endpoint">
                    <span class="method post">POST</span>
                    <code>/docs/search</code> - B√∫squeda avanzada
                </div>
                <div class="endpoint">
                    <span class="method get">GET</span>
                    <code>/repositories</code> - Lista repositorios
                </div>
                <div class="endpoint">
                    <span class="method post">POST</span>
                    <code>/build/mkdocs</code> - Build de documentaci√≥n
                </div>
            </div>
        </div>
    </main>

    <footer class="footer">
        <div class="container">
            <p>&copy; 2025 IA-Ops Complete Portal - Migrado y mejorado en Dev-Core</p>
        </div>
    </footer>

    <script>
        async function loadAllDocs() {
            try {
                const response = await fetch('/api/docs/list');
                const data = await response.json();
                displayDocs(data.documents, 'Todos los Documentos');
            } catch (error) {
                console.error('Error loading docs:', error);
            }
        }

        async function searchDocs() {
            const query = document.getElementById('searchInput').value;
            if (query.length < 2) {
                alert('La b√∫squeda debe tener al menos 2 caracteres');
                return;
            }

            try {
                const response = await fetch('/api/docs/search', {
                    method: 'POST',
                    headers: { 'Content-Type': 'application/json' },
                    body: JSON.stringify({ query: query })
                });
                const data = await response.json();
                displaySearchResults(data.results, query);
            } catch (error) {
                console.error('Error searching:', error);
            }
        }

        function displayDocs(docs, title) {
            const container = document.getElementById('docsContainer');
            let html = `<h3>üìã ${title} (${docs.length})</h3><div class="docs-grid">`;
            
            docs.forEach(doc => {
                html += `
                    <div class="doc-card">
                        <h4>${doc.name}</h4>
                        <p><strong>Ruta:</strong> ${doc.path}</p>
                        <p><strong>Modificado:</strong> ${new Date(doc.modified).toLocaleDateString()}</p>
                        <a href="/api/docs/content/${doc.path}" target="_blank">Ver Documento ‚Üí</a>
                    </div>
                `;
            });
            
            html += '</div>';
            container.innerHTML = html;
        }

        function displaySearchResults(results, query) {
            const container = document.getElementById('searchResults');
            let html = `<h4>Resultados para "${query}" (${results.length})</h4>`;
            
            if (results.length === 0) {
                html += '<p>No se encontraron resultados.</p>';
            } else {
                html += '<div class="docs-grid">';
                results.forEach(result => {
                    html += `
                        <div class="doc-card">
                            <h4>${result.name}</h4>
                            <p><strong>Archivo:</strong> ${result.path}</p>
                            <a href="/api/docs/content/${result.path}" target="_blank">Ver Documento ‚Üí</a>
                        </div>
                    `;
                });
                html += '</div>';
            }
            
            container.innerHTML = html;
        }

        // Load docs on page load
        loadAllDocs();

        // Search on Enter
        document.getElementById('searchInput').addEventListener('keypress', function(e) {
            if (e.key === 'Enter') {
                searchDocs();
            }
        });
    </script>
</body>
</html>
        """
        
        template_path = TEMPLATES_DIR / "index.html"
        template_path.write_text(main_template)
    
    def setup_static_files(self):
        """Setup static files"""
        css_content = """
        /* Additional CSS for enhanced styling */
        .loading { text-align: center; padding: 2rem; color: #6c757d; }
        .error { background: #f8d7da; color: #721c24; padding: 1rem; border-radius: 5px; margin: 1rem 0; }
        .success { background: #d4edda; color: #155724; padding: 1rem; border-radius: 5px; margin: 1rem 0; }
        """
        
        css_path = STATIC_DIR / "style.css"
        css_path.write_text(css_content)

# Initialize portal
portal = CompleteDocsPortal()

@app.get("/health")
async def health():
    return {
        "status": "healthy",
        "service": "complete-docs-portal",
        "version": "2.0.0",
        "components": {
            "docs": "healthy",
            "repositories": "healthy",
            "build": "healthy"
        }
    }

@app.get("/", response_class=HTMLResponse)
async def main_portal(request: Request):
    """Portal principal completo"""
    return templates.TemplateResponse("index.html", {"request": request})

@app.get("/api/docs/list")
async def list_documents():
    """Lista todos los documentos disponibles"""
    docs = []
    for md_file in DOCS_DIR.rglob("*.md"):
        relative_path = md_file.relative_to(DOCS_DIR)
        docs.append({
            "path": str(relative_path),
            "name": md_file.stem,
            "size": md_file.stat().st_size,
            "modified": datetime.fromtimestamp(md_file.stat().st_mtime).isoformat()
        })
    
    return {"documents": docs, "count": len(docs)}

@app.get("/api/docs/content/{path:path}")
async def get_document_content(path: str):
    """Obtiene el contenido de un documento espec√≠fico"""
    try:
        full_path = DOCS_DIR / path
        if not full_path.exists():
            raise HTTPException(status_code=404, detail="Document not found")
        
        content = full_path.read_text(encoding='utf-8')
        html_content = simple_markdown_to_html(content)
        
        return {
            "path": path,
            "raw_content": content,
            "html_content": html_content,
            "size": full_path.stat().st_size,
            "modified": datetime.fromtimestamp(full_path.stat().st_mtime).isoformat()
        }
    except Exception as e:
        raise HTTPException(status_code=500, detail=str(e))

@app.post("/api/docs/search")
async def search_documents(request: dict):
    """B√∫squeda avanzada en documentos"""
    query = request.get("query", "").lower()
    if len(query) < 2:
        raise HTTPException(status_code=400, detail="Query must be at least 2 characters")
    
    results = []
    for md_file in DOCS_DIR.rglob("*.md"):
        try:
            content = md_file.read_text(encoding='utf-8')
            if query in content.lower():
                relative_path = md_file.relative_to(DOCS_DIR)
                results.append({
                    "path": str(relative_path),
                    "name": md_file.stem,
                    "size": md_file.stat().st_size,
                    "modified": datetime.fromtimestamp(md_file.stat().st_mtime).isoformat()
                })
        except Exception as e:
            logger.error(f"Error searching in {md_file}: {e}")
    
    return {"query": query, "results": results, "count": len(results)}

@app.get("/api/repositories")
async def list_repositories():
    """Lista repositorios disponibles"""
    repos = []
    if REPOS_DIR.exists():
        for repo_dir in REPOS_DIR.iterdir():
            if repo_dir.is_dir():
                repos.append({
                    "name": repo_dir.name,
                    "path": str(repo_dir),
                    "status": "available",
                    "docs_count": len(list(repo_dir.rglob("*.md"))) if repo_dir.exists() else 0
                })
    
    return {"repositories": repos, "count": len(repos)}

@app.post("/api/build/mkdocs")
async def build_mkdocs(request: dict):
    """Build MkDocs documentation"""
    repo_name = request.get("repository", "default")
    
    return {
        "status": "initiated",
        "repository": repo_name,
        "build_id": f"build_{datetime.now().strftime('%Y%m%d_%H%M%S')}",
        "message": "Build process initiated successfully"
    }

def simple_markdown_to_html(content: str) -> str:
    """Conversi√≥n simple de Markdown a HTML mejorada"""
    html = content
    
    # Headers
    html = re.sub(r'^### (.*$)', r'<h3>\1</h3>', html, flags=re.MULTILINE)
    html = re.sub(r'^## (.*$)', r'<h2>\1</h2>', html, flags=re.MULTILINE)
    html = re.sub(r'^# (.*$)', r'<h1>\1</h1>', html, flags=re.MULTILINE)
    
    # Code blocks
    html = re.sub(r'```(.*?)```', r'<pre><code>\1</code></pre>', html, flags=re.DOTALL)
    html = re.sub(r'`([^`]+)`', r'<code>\1</code>', html)
    
    # Bold and italic
    html = re.sub(r'\*\*(.*?)\*\*', r'<strong>\1</strong>', html)
    html = re.sub(r'\*(.*?)\*', r'<em>\1</em>', html)
    
    # Lists
    html = re.sub(r'^- (.*$)', r'<li>\1</li>', html, flags=re.MULTILINE)
    html = re.sub(r'(<li>.*?</li>)', r'<ul>\1</ul>', html, flags=re.DOTALL)
    
    # Links
    html = re.sub(r'\[([^\]]+)\]\(([^)]+)\)', r'<a href="\2">\1</a>', html)
    
    # Line breaks
    html = html.replace('\n\n', '</p><p>')
    html = f'<p>{html}</p>'
    html = html.replace('<p></p>', '')
    
    return html

if __name__ == "__main__":
    import uvicorn
    uvicorn.run(app, host="0.0.0.0", port=8845)
